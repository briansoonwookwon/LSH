use_cases
=========

.. py:module:: use_cases


Functions
---------

.. autoapisummary::

   use_cases.collection_deduplication
   use_cases.nearest_neighbor_search


Module Contents
---------------

.. py:function:: collection_deduplication(lsh)

   Clusters documents using LSH results and Union-Find, removing duplicates.

   This function clusters documents into groups of near-duplicates based on the candidate pairs
   found using Locality Sensitive Hashing (LSH) and the Union-Find data structure. It further
   incorporates exact duplicates into the clusters.

   The process works as follows:
   1. It initializes a Union-Find structure to manage clustering.
   2. For each pair of candidate documents (found via LSH banding), it unites them in the Union-Find.
   3. The documents are grouped by their root in Union-Find to form clusters of similar documents.
   4. Exact duplicates (if any) are added to the clusters containing their original document.

   :param lsh: An instance of the LSH class containing precomputed MinHash signatures,
               candidate pairs, and exact duplicate information.
   :type lsh: LSH

   :returns:

             A dictionary where the keys are root document IDs and values are lists of document IDs
                   representing clusters of similar documents (including exact duplicates).
   :rtype: dict

   .. rubric:: Example

   >>> clusters = collection_deduplication(lsh)
   >>> for root, docs in clusters.items():
       >>> print(f"Cluster with root document {root}: {docs}")


.. py:function:: nearest_neighbor_search(query_doc, lsh)

   Finds approximate nearest neighbors for a given query document using LSH.

   This function performs an approximate nearest neighbor search for the input query document.
   It uses the following steps:

   1. Cleans the query document by removing stop words, punctuation, and normalizing the text.
   2. Computes shingles from the cleaned document using the shingle size `lsh.k`.
   3. Calculates the MinHash signature of the query document based on the specified number of hash functions.
   4. Finds candidate nearest neighbors by comparing the query document's MinHash signature against
      the existing signatures in the LSH index. The candidate pairs are documents that share at least
      one band with the query document.

   :param query_doc: The text of the query document for which to find approximate nearest neighbors.
   :type query_doc: str
   :param lsh: An instance of the LSH class containing the precomputed MinHash signatures
               and the banding index for efficient nearest neighbor search.
   :type lsh: LSH

   :returns: A set of document IDs representing the candidate nearest neighbors for the query document.
   :rtype: set

   .. rubric:: Example

   >>> query_document = "This is a sample document text for searching."
   >>> candidate_neighbors = nearest_neighbor_search(query_document, lsh)
   >>> print("Candidate Nearest Neighbors:", candidate_neighbors)


